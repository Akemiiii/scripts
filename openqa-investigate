#!/bin/bash

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

host="${host:-"openqa.opensuse.org"}"
scheme="${scheme:-"https"}"
host_url="$scheme://$host"
dry_run="${dry_run:-"0"}"
prio_add="${prio_add:-"100"}"
client_args="--json-output --host $host_url"
echoerr() { echo "$@" >&2; }


clone() {
    id="${1:?"Need 'job_id'"}"
    name_suffix="${2+":$2"}"
    # shellcheck disable=SC2086
    job_data=$(openqa-client $client_args jobs/"$id")
    name=$(echo "$job_data" | jq -r '.job.test')
    base_prio=$(echo "$job_data" | jq -r '.job.priority')
    out=$($clone_call "$host_url/tests/$id" TEST="$name:investigate$name_suffix" _GROUP_ID=0 BUILD= "${@:3}")
    echo "$out"
    clone_id=${out/:*/}; clone_id=${clone_id/*#/}
    $client_call jobs/"$clone_id" put --json-data "{\"priority\": $((base_prio + prio_add))}"
}

# crosscheck
# 1. current job/build + current test -> check if reproducible/sporadic
# 2. current job/build + last good test (+ last good needles) -> check for
#    test (+needles) regression
# 3. last good job/build + current test -> check for product regression
# 4. last good job/build + last good test -> check for other problem
#    sources, e.g. infrastructure
investigate() {
    id="${1##*/}"

    # Optionally we can find "first failed", could extend openQA investigation
    # method instead for we are just working based on supplied job which can
    # have more, ambiguous potential changes that we need to bisect on

    # for 1. current job/build + current test -> check if reproducible/sporadic
    clone "$id" 'retry'

    job_url="$host_url/tests/$id"
    investigation=$(curl -s "$job_url"/investigation)
    last_good=$(echo "$investigation" | jq -r '.last_good')

    # for 2. current job/build + last good test (+ last good needles) ->
    #   check for test (+needles) regression
    test_log=$(echo "$investigation" | jq -r '.test_log')
    if echo "$test_log" | grep -q "No.*changes recorded"; then
        echo "$test_log. Skipping test regression investigation job."
        last_good_tests=''
    else
        vars_last_good=$(curl -s "$host_url/tests/$last_good"/file/vars.json)
        last_good_tests=$(echo "$vars_last_good" | jq -r '.TEST_GIT_HASH')
        # here we could apply the same approach for needles, not only tests
        # With https://github.com/os-autoinst/os-autoinst/pull/1358 we could
        # theoretically use TEST_GIT_REFSPEC but this would act on the shared
        # test case dir within either the common openQA folder or the common
        # worker cache and hence influence other tests.
        # So better we use CASEDIR with a git refspec, only slightly less
        # efficient and also needing to know which git repo to use
        #refspec_arg="TEST_GIT_REFSPEC=$last_good_tests"
        repo="${repo:-"https://github.com/os-autoinst/os-autoinst-distri-opensuse.git"}"
        refspec_arg="CASEDIR=$repo#$last_good_tests"
        clone "$id" "last_good_tests:$last_good_tests" "$refspec_arg"
    fi

    # 3. last good job/build + current test -> check for product regression
    if ! echo "$investigation" | grep -q '\<BUILD\>'; then
        echo "Current job has same build as last good, product regression unlikely. Skipping product regression investigation job."
        last_good_build=''
    else
        vars_last_good=${vars_last_good:-$(curl -s "$host_url/tests/$last_good"/file/vars.json)}
        last_good_build=$(echo "$vars_last_good" | jq -r '.BUILD')
        # here we clone with unspecified test refspec, i.e. this could be a
        # more recent tests version. As an alternative we could explicitly
        # checkout the git version from "first bad"
        clone "$last_good" "last_good_build:$last_good_build"
    fi

    # 4. last good job/build + last good test -> check for other problem
    #    sources, e.g. infrastructure
    if [[ -z $last_good_tests ]]; then
        echo "No test regression expected. Not triggered 'good build+test' as it would be the same as 3., good build + current test"
    elif [[ -z $last_good_build ]]; then
        echo "No product regression expected. Not triggered 'good build+test' as it would be the same as 2., current build + good test"
    else
        clone "$last_good" "last_good_tests_and_build:$last_good_tests+$last_good_build" "$refspec_arg"
    fi
}

main() {
    client_prefix=''
    [ "$dry_run" = "1" ] && client_prefix="echo"
    client_call="${client_call:-"$client_prefix openqa-client $client_args"}"
    clone_call="${clone_call:-"$client_prefix openqa-clone-job --skip-chained-deps --within-instance"}"
    # shellcheck disable=SC2013
    for i in $(cat - | sed 's/ .*$//'); do
        investigate "$i"
    done
}

main
